name: UI Test
on: 
  workflow_dispatch:
jobs:
  build:
    runs-on: macos-latest # the machine type
    strategy: # we are using strategy if we need to run on parallel with different devices and version
      matrix:
        api-level: [29] #Google api level for example [25,23,28]
        target: [default]
    steps:
      - uses: actions/checkout@v3 #checkout the code
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Install and Run Appium Server
        run: |
          chmod +x ./scripts/RunAppiumServer.sh # install and run appium server in the background
          ./scripts/RunAppiumServer.sh
          
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
         path: ~/.m2
         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
         restore-keys: ${{ runner.os }}-m2





#       - name: AVD cache
#         uses: actions/cache@v3
#         id: avd-cache
#         with:
#           path: |
#             ~/.android/avd/*
#             ~/.android/adb*
#           key: avd-${{ matrix.api-level }} 
      
#       - name: create AVD and generate snapshot for caching
#         if: steps.avd-cache.outputs.cache-hit != 'true'
#         uses: reactivecircus/android-emulator-runner@v2
#         with:
#           api-level: ${{ matrix.api-level }}
#           force-avd-creation: true
#           avd-name: pixel-test
#           emulator-options: -no-snapshot-save -gpu swiftshader_indirect -noaudio -no-boot-anim  
# #           emulator-options: -no-snapshot-save -gpu host -noaudio -no-boot-anim 
#           disable-animations: false
#           script: emulator -list-avds
# #       - name: install apk
# #         run: | 
       
       
       
       
       
      - name: Create Android emulator
        run: |
          brew install intel-haxm
          # Install AVD files
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;default;x86_64'
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --licenses
          
          # Create emulator
          $ANDROID_HOME/tools/bin/avdmanager create avd -n Pixel_API_29_AOSP -d pixel --package 'system-images;android-27;default;x86_64'
          $ANDROID_HOME/emulator/emulator -list-avds
          if false; then
          emulator_config=~/.android/avd/Pixel_API_29_AOSP.avd/config.ini
          # The following madness is to support empty OR populated config.ini files,
          # the state of which is dependant on the version of the emulator used (which we don't control),
          # so let's be defensive to be safe.
          # Replace existing config (NOTE we're on MacOS so sed works differently!)
          sed -i .bak 's/hw.lcd.density=.*/hw.lcd.density=420/' "$emulator_config"
          sed -i .bak 's/hw.lcd.height=.*/hw.lcd.height=1920/' "$emulator_config"
          sed -i .bak 's/hw.lcd.width=.*/hw.lcd.width=1080/' "$emulator_config"
          # Or, add new config
          if ! grep -q "hw.lcd.density" "$emulator_config"; then
            echo "hw.lcd.density=420" >> "$emulator_config"
          fi
          if ! grep -q "hw.lcd.height" "$emulator_config"; then
            echo "hw.lcd.height=1920" >> "$emulator_config"
          fi
          if ! grep -q "hw.lcd.width" "$emulator_config"; then
            echo "hw.lcd.width=1080" >> "$emulator_config"
          fi
          echo "Emulator settings ($emulator_config)"
          cat "$emulator_config"
          fi
          
      - name: Start Android emulator
        run: |
          echo "Starting emulator and waiting for boot to complete...."
          ls -la $ANDROID_HOME/emulator
          nohup $ANDROID_HOME/tools/emulator -avd Pixel_API_29_AOSP -gpu host -no-audio -no-boot-anim -camera-back none -camera-front none -qemu -m 2048 2>&1 &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do echo "wait..."; sleep 1; done; input keyevent 82'
          echo "Emulator has finished booting"
          $ANDROID_HOME/platform-tools/adb devices
          sleep 30
          screencapture screenshot.jpg
          $ANDROID_HOME/platform-tools/adb exec-out screencap -p > emulator.png

          
          
          
          
          
#       - name: Run Appium Tests
#         uses: reactivecircus/android-emulator-runner@v2 # install and create the Emulator
#         with:
#           api-level: ${{ matrix.api-level }}
#           force-avd-creation: true
#           emulator-options: -no-snapshot-save -gpu swiftshader_indirect -noaudio -no-boot-anim 
#           #emulator-options: -no-snapshot-save -gpu swiftshader_indirect -noaudio -no-accel -no-boot-anim
#           disable-animations: true
#           target: ${{ matrix.target }}
#           arch: x86_64
#           avd-name: test
#           profile: Nexus 6
#           script: |
#                 #pwd
#                 #cd / && cd /Users/runner/work/ui-test3/ui-test3
#                 #git clone https://github.com/aishwaryakb/ui-test3.git
#                 #cp -i /Users/runner/work/ui-test3/ui-test3/ui-test3/src/bren-test.apk /Users/runner/Library/Android/sdk/platform-tools/bren-test.apk
#                 #cd / && cd Users/runner/Library/Android/sdk/platform-tools/ && ls -l && adb install bren-test.apk
#                 #pwd
#                 mvn clean test -Dsurefire.suiteXmlFiles=testng.xml # running our test to check the results
#       - name: Use the Upload Artifact GitHub Action
#         uses: actions/upload-artifact@v2
#         with: 
#           name: Report-download
#           path: index.html
#         if: always()

